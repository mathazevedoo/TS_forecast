petr4=ts(petr4)
##### Agora sim, o gráfico como série de tempo
ggplotly(
basepetr4 %>%
mutate(Data = as.Date(Data)) %>%
ggplot() +
geom_line(aes(x = Data, y = Fechamento, color = "série")) +
scale_color_viridis_d() +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none")
)
petr4=ts(petr4, start=1, end=456)
plot(petr4, main="Cotações da PETR4 - jan/2020 a nov/2021",
xlab="Tempo em dias (02/01/20 a 01/11/21)", ylab="R$/ação" )
q_neg=ts(basepetr4[2])
volume=ts(basepetr4[3])
abertura=ts(basepetr4[5])
dados1=ts(matrix(1,456,4))
dados1[,1]=petr4
dados1[,2]=q_neg
dados1[,3]=volume
dados1[,4]=abertura
colnames(dados1)[1]='Fechamento R$'
colnames(dados1)[2]='Quant. Neg'
colnames(dados1)[3]='Volume Financ. Neg'
colnames(dados1)[4]='Abertura R$'
plot(dados1, main="Informações da ação PETR4",
xlab="Tempo em dias (02/01/20 a 01/11/21) -
Fonte: Economática")
par(mfrow=c(2,2))
plot(petr4, main="Cotação de Fechamento PETR4 - jan/20 a nov/21",
xlab="tempo em dias - 02/01/20 a 01/11/21", ylab="R$")
options(scipen = 999)
plot(q_neg, main="Quantidade de Negócios Realizados - PETR4",
xlab="tempo em dias - 02/01/20 a 01/11/21", ylab="Núm.Negócios")
options(scipen = 999)
plot(volume, main="Volume Financeiro Negociado PETR4 - jan/20 a nov/21",
xlab="tempo em dias - 02/01/20 a 01/11/21", ylab="R$")
plot(abertura, main="Cotação de Abertura PETR4 - jan/20 a nov/21",
xlab="tempo em dias - 02/01/20 a 01/11/21", ylab="R$")
par(mfrow=c(1,1))
passageiros <- read_excel("passageiros.xlsx")
View(passageiros)
passageiros = passageiros[2]
head(passageiros)
passageiros=ts(passageiros)
plot(passageiros, main="Total de Passageiros no Transporte Aéreo BR",
xlab="Jan/2011 a set/2021", ylab="Total de Passageiros Mensal" )
ambev <- read_excel("ambev.xlsx")
###### Lendo a base de dados
View(ambev)
receita=ts(ambev[2], start=c(2000,1), end=c(2021,3), frequency=4)
###### plotando o grafico
# options(scipen = 999)
plot(receita, main="Faturamento Trimestral da AMBEV SA - 1T/2000 ao 3T/2021",
xlab="Trimestres - jan/2000 a set/2021", ylab="R$ mil")
manchas <- read_excel("manchas.xlsx")
sol=ts(manchas$manchas,start=c(1749,1), end=c(2021,10), frequency = 12)
plot(sol, main="Número Médio Mensal de Manchas Solares",
xlab="Mensal - jan/1749 a out/2021")
summary(sol)
sd(sol)
length(sol)
sol1=window(sol,c(1749,1), c(1990,12))
plot(sol1)
aleat=ts(rnorm(500))
View(aleat)
plot(aleat, main="Série Temporal de Números Aleatórios com Distribuição Normal Padrão",
xlab="quantidade de números aleatórios")
mean(aleat)
sd(aleat)
aleat1=ts(rnorm(500, 2,0.1))
plot(aleat1)
mean(aleat1)
sd(aleat1)
passeio=cumsum(aleat)
plot(passeio, type='l', main="Passeio Aleatório", xlab = "Núm. Observações")
petropasseio=ts(0, start=1, end=456)
##### séries começam no mesmo ponto
petropasseio[1] = petr4[1]
for(i in 2:456){petropasseio[i]=petropasseio[i-1]+rnorm(1)}
plot(petr4, main="Cotação Original de Fechamento e Random Walk",
xlab="tempo em dias - jan/20 a nov/21",
ylab="R$", ylim=c(min(petr4),max(petropasseio)))
par(new=TRUE)
lines(petropasseio, type="l", lty=2, ylim=c(min(petr4),max(petropasseio)))
legend("bottomright", c('Cotação Original','Random Walk'), lty = 1:2, bty='n')
covid <- read_excel("covid.xlsx")
# visualizando a série com as médias móveis
ggplotly(
covid %>%
mutate(Data = as.Date(Data),
media_movel = ma(por_dia, order=14)) %>%
ggplot() +
geom_line(aes(x = Data, y = por_dia, color = "Por Dia")) +
geom_line(aes(x = Data, y = media_movel, color = "Média Móvel"), size = 1) +
labs(color = "Legenda:",
x = "Data",
y = "Comportamento da Covid-19") +
scale_color_viridis_d() +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "bottom")
) %>% layout(showlegend = TRUE,
legend = list(orientation = "h"))
covid %>%
mutate(Data = as.Date(Data),
media_movel = ma(por_dia, order=14)) %>%
ggplot() +
geom_boxplot(aes(x = Data, y = por_dia, color = "Por Dia")) +
labs(x = "Data",
y = "Comportamento da Covid-19") +
scale_color_viridis_d() +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none")
covid %>%
mutate(Data = as.Date(Data),
covid_suave = tsclean(por_dia),
media_movel = ma(por_dia, order=14)) %>%
ggplot() +
geom_line(aes(x = Data, y = por_dia, color = "Série Original"), size = 1) +
geom_line(aes(x = Data, y = covid_suave, color = "Série Suavizada")) +
geom_line(aes(x = Data, y = media_movel, color = "Média Móvel"), size = 1) +
labs(color = "Legenda:",
x = "Data",
y = "Comportamento da Covid-19") +
scale_color_viridis_d() +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "bottom")
tsoutliers(covid$por_dia)
ggplotly(
covid %>%
mutate(Data = as.Date(Data),
media_movel_nao_centralizada = SMA(por_dia, 14)) %>%
ggplot() +
geom_line(aes(x = Data, y = por_dia, color = "Por Dia")) +
geom_line(aes(x = Data, y = media_movel_nao_centralizada,
color = "Média Móvel Não Centralizada"), size = 1) +
labs(color = "Legenda:",
x = "Data",
y = "Comportamento da Covid-19") +
scale_color_viridis_d() +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "bottom")
) %>% layout(showlegend = TRUE,
legend = list(orientation = "h"))
s=ts(c(10,14,8,25,16,22,14,35,15,27,18,40,28,40,25,65), start=c(2016,1),
end=c(2019,4), frequency = 4)
plot(s)
decompa=decompose(s,type = "additive")
plot(decompa)
decompa$trend
decompa$seasonal
decompa$random
decompm=decompose(s,type = "multiplicative")
plot(decompm)
decompm$trend
decompm$seasonal
decompm$random
load("pib.RData")
#Transformando a base de dados em um objeto de classe ts
pib_ts <- ts(data = pib[, 2],
start = c(2004, 1),
end = c(2021, 9),
frequency = 12)
#Fazendo a plotagem da série temporal
pib %>%
ggplot() +
geom_line(aes(x = Data, y = PIB, group = TRUE, color = "PIB"), size = 1) +
scale_color_viridis_d() +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none")
decpib <- decompose(x = pib_ts,
type = "additive")
#Transformando o objeto decpib num data frame
decpib_df <- data.frame(tempo = pib$Data,
serie = unlist(decpib$x),
tendencia = unlist(decpib$trend),
sazonalidade = unlist(decpib$seasonal),
dessazonalizada = pib_ts - decpib$seasonal,
erro = unlist(decpib$random)) %>%
rename(tempo = 1,
serie = 2,
tendencia = 3,
sazonalidade = 4,
dessazonalizada = 5,
erro = 6)
#Plotando a decomposição de forma conjunta
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = serie, color = "Série"), size = 1.2) +
geom_line(aes(x = tempo, y = tendencia, color = "Tendência"), size = 1) +
geom_line(aes(x = tempo, y = sazonalidade, color = "Sazonalidade"), size = 1.2) +
geom_line(aes(x = tempo, y = erro, color = "Erro"), size = 1) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(color = "Legenda:",
x = NULL,
y = NULL) +
scale_color_manual(values = c("#440154FF", "#3CBB75FF", "#39568CFF", "#DCE319FF")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "bottom")
# observando cada componente - vide excel
decpib$trend
decpib$seasonal
decpib$random
#a) Série
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = serie, color = "Série")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(title = "Série",
x = NULL,
y = NULL) +
scale_color_manual(values = c("#39568CFF")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4, size = 7),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none") -> decomp_serie
#b) Sazonalidade
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = sazonalidade, color = "Sazonalidade")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(title = "Sazonalidade",
x = NULL,
y = NULL) +
scale_color_manual(values = c("#3CBB75FF")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4, size = 7),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none") -> decomp_sazonalidade
#c) Tendência
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = tendencia, color = "Tendência")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(title = "Tendência",
x = NULL,
y = NULL) +
scale_color_manual(values = c("#DCE319FF")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4, size = 7),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none") -> decomp_tendencia
#d) Erro
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = erro, color = "Erro")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(title = "Erro",
x = NULL,
y = NULL) +
scale_color_manual(values = c("#440154FF")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4, size = 7),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "none") -> decomp_erro
#Dê zoom para uma visualização mais agradável
grid.arrange(decomp_serie,
decomp_sazonalidade,
decomp_tendencia,
decomp_erro,
ncol = 1)
#Plotando a série dessazonalizada
decpib_df %>%
ggplot() +
geom_line(aes(x = tempo, y = serie, color = "Série"), size = 1.2) +
geom_line(aes(x = tempo, y = dessazonalizada, color = "Dessazonalizada"), size = 1) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 year") +
scale_y_continuous(labels = scales::comma) +
labs(color = "Legenda:",
x = NULL,
y = NULL) +
scale_color_viridis_d() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4),
panel.background = element_rect(fill = "white", color = "black"),
panel.grid = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA),
legend.position = "bottom")
decpib = decompose(pib_ts, type = "multiplicative")
plot(decpib)
# observando cada componente - vide excel
decpib$trend
decpib$seasonal
decpib$random
base=ts(c(3,5,9,20,12,17,22,23,51,41,56,75,60,75,88))
autoplot(base)
# criando o modelo de suavização exponencial com previsão de 3 passos (h) a frente
modeloses=ses(base,h=3)
modeloses
# modelo gerado
modeloses$model
modeloses$fitted
autoplot(modeloses)
base=ts(c(10,14,8,25,16,22,14,35,15,27,18,40,28,40,25,65),start = c(2010,1),
end = c(2013,4), frequency = 4)
autoplot(base)
modeloholt =holt(base,h=3)
modeloholt
# modelo gerado
modeloholt$model
modeloholt$fitted
autoplot(modeloholt)
modholtamort =holt(base,damped = T, phi = 0.9, h=3)
modholtamort
# modelo gerado
modholtamort$model
autoplot(modholtamort)
modholtsazonalad=hw(base,h=3,seasonal="additive")
modholtsazonalad
# modelo gerado
modholtsazonalad$model
autoplot(modholtsazonalad)
modholtsazonalm=hw(base,h=3,seasonal="multiplicative")
modholtsazonalm
# modelo gerado
modholtsazonalm$model
autoplot(modholtsazonalm)
ambev <- read_excel("ambev.xlsx")
ambev=ambev[2]
ambev=ts(ambev,start=c(2000,1), end=c(2021,3), frequency=4)
ambev
length(ambev)
bambev=window(ambev,start=c(2000,1), end=c(2019,4))
plot(bambev)
reais=window(ambev,start=c(2020,1), end=c(2021,3))
plot(reais)
length(reais)
ses=ses(bambev,h=7)
prevses=ses$mean
prevses
pses=ts(prevses,start=c(2020,1),end=c(2021,3), frequency = 4)
qualises=accuracy(pses,reais)
qualises=accuracy(pses,reais)[5]
accuracy(pses,reais)
ses=ses(bambev,h=7)
prevses=ses$mean
prevses
ambev <- read_excel("ambev.xlsx")
ambev=ambev[2]
ambev
reais=window(ambev,start=c(2020,1), end=c(2021,3))
ambev=ts(ambev,start=c(2000,1), end=c(2021,3), frequency=4)
bambev=window(ambev,start=c(2000,1), end=c(2019,4))
reais=window(ambev,start=c(2020,1), end=c(2021,3))
ses=ses(bambev,h=7)
prevses=ses$mean
prevses
pses=ts(prevses,start=c(2020,1),end=c(2021,3), frequency = 4)
qualises=accuracy(pses,reais)
accuracy(pses,reais)[5]
qualises
qualises=accuracy(pses,reais)
qualises=accuracy(pses,reais)[5]
qualises
ambev.hw <- forecast::hw(bambev, h = 7, seasonal = "additive")
summary(ambev.hw)
autoplot(ambev) +
forecast::autolayer(ambev.hw,
series = "Holt-Winters adit",
PI = FALSE) +
xlab("Ano") +
ylab("Receita Líquida") +
ggtitle("Forecasts para AMBEV") +
guides(colour = guide_legend(title = "Forecast")) +
scale_color_viridis_d(option = "cividis") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
accuracy(ambev.hw$mean,reais)
ambev.ets <- ets(bambev, model = "ZZZ")
summary(ambev.ets)
ambev.ets.forecasts <- forecast.ets(ambev.ets, h = 7)
summary(ambev.ets.forecasts)
accuracy(ambev.ets.forecasts$mean,reais)
# criando o modelo de suavização exponencial com previsão de 3 passos (h) a frente
modeloses=ses(base,h=3, level = c(95,99))
modeloses
# modelo gerado
modeloses$model
modeloses$fitted
autoplot(modeloses)
# criando o modelo de suavização exponencial com previsão de 3 passos (h) a frente
modeloses=ses(base,h=3)
modeloses
# modelo gerado
modeloses$model
modeloses$fitted
autoplot(modeloses)
modholtsazonalad=hw(base,h=3,seasonal="additive")
modholtsazonalad
# modelo gerado
modholtsazonalad$model
autoplot(modholtsazonalad)
pacotes <- c("readxl","plotly","tidyverse","gridExtra","forecast","TTR",
"smooth","tidyverse", "tsibble", "fable","tsibbledata", "fpp3",
"urca","accuracy")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
install.packages("accuracy")
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages(c("broom", "bslib", "Cairo", "callr", "caret", "dendextend", "devtools", "DT", "evaluate", "farver", "fontawesome", "generics", "geometry", "gert", "globals", "gtools", "htmltools", "igraph", "latticeExtra", "lme4", "multcomp", "pillar", "processx", "qap", "quantreg", "raster", "Rcpp", "roxygen2", "s2", "sass", "seriation", "sf", "shiny", "statmod", "stringi", "terra", "tibble", "tidyverse", "TSP", "xfun"))
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0/forecast/R/forecast", repos = NULL)
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0/forecast/R/forecast", repos = NULL)
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0/forecast/R/forecast", repos = NULL)
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip", repos = NULL, type = "win.binary")
pacotes <- c("readxl","plotly","tidyverse","gridExtra","forecast","TTR",
"smooth","tidyverse", "tsibble", "fable","tsibbledata", "fpp3",
"urca","accuracy")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("readxl","plotly","tidyverse","gridExtra","forecast","TTR",
"smooth","tidyverse", "tsibble", "fable","tsibbledata", "fpp3",
"urca")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
ambev <- read_excel("ambev.xlsx")
ambev=ambev[2]
ambev=ts(ambev,start=c(2000,1), end=c(2021,3), frequency=4)
ambev
length(ambev)
bambev=window(ambev,start=c(2000,1), end=c(2019,4))
plot(bambev)
reais=window(ambev,start=c(2020,1), end=c(2021,3))
plot(reais)
length(reais)
ses=ses(bambev,h=7)
prevses=ses$mean
prevses
pses=ts(prevses,start=c(2020,1),end=c(2021,3), frequency = 4)
qualises=accuracy(pses,reais)
qualises=accuracy(pses,reais)[5]
qualises
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Matheus Azevedo/Downloads/forecast_8.0.zip", repos = NULL, type = "win.binary")
